:pop        ( () k ) def
:dip        ( cake k ) def
:cons       ( cake pop ) def
:i          ( (()) dip k ) def
:dup        ( () cake dip dip ) def
:rep        ( dup ( i ) dip i ) def
:run        ( dup ( i ) dip ) def
:m          ( dup i ) def
:cat        ( ( ( i ) dip i ) cons cons ) def
:unit       ( () cons ) def
:swap       ( unit dip ) def
:z          ( swap k ) def
:popd       ( ( pop ) dip ) def
:dupd       ( ( dup ) dip ) def
:swapd      ( ( swap ) dip ) def
:dup2       ( dupd dup swapd ) def
:pop2       ( pop pop ) def
:swat       ( swap cat ) def
:i2         ( ( dip ) dip i ) def
:dipd       ( ( dip ) cons dip ) def
:dip2       ( ( dip ) cons dip ) def
:dip3       ( ( dip2 ) cons dip ) def
:rollup     ( swap swapd ) def
:rolldown   ( swapd swap ) def
:rotate     ( swapd swap swapd ) def
:rollupd    ( ( rollup ) dip ) def
:rolldownd  ( ( rolldown ) dip ) def
:rotated    ( ( rotate ) dip ) def

:pred       ( 1 - ) def
:succ       ( 1 + ) def
:neq        ( eq not ) def
:itob       ( 0 neq ) def
:btoi       ( ( 1 ) ( 0 ) if) def
:repeat     ( dupd pred dup (0 gt) rollup ( repeat cat ) cons cons () if ) def
:fact       ( dup ( 0 gt ) dip dup pred ( fact * ) cons cons ( 1 ) if ) def