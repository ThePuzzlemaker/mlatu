:pop        ( () k ) def
:dip        ( cake k ) def
:cons       ( cake () k ) def
:i          ( (()) dip k ) def
:dup        ( () cake dip dip ) def
:cat        ( ( :i dip i ) cons cons) def
:unit       ( () cons ) def
:popd       ( :pop dip ) def
:dupd       ( :dup dip ) def
:rollupd    ( :rollup dip ) def
:rolldownd  ( :rolldown dip ) def
:rotated    ( :rotate dip ) def
:pred       ( 1 - ) def
:succ       ( 1 + ) def
:neq        ( eq not ) def
:itob       ( 0 neq ) def
:btoi       ( ( 1 ) ( 0 ) if) def
:repeat     ( dupd pred dup itob rollup ( repeat cat ) cons cons () if ) def