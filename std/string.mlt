
trait show (for t. t -> char list)


data char {  } 

instance cmp (char, char -> ord) {
  "cmp" extern
}

instance show (char list -> char list) { "\"" "\"" surround}

instance show (for a b. b a either -> char list) {
  match | left { show " left" append } | right { show " right" append }
}

instance show (for t. t optional -> char list) {
  match | some { show " some" append } | none { "none" }
}

instance show (bool -> char list) {
  match | true { "true" } | false { "false" }
}

instance show (nat -> char list) {
  "show-nat" extern
}

instance show (char -> char list) {
  once "'" "'" surround 
}

instance show (nat list -> char list) { show-nat-list "[" "]" surround
}

define show-nat-list (nat list -> char list) {
  \show map "," join 
}