data (t) option { none ( -> t option) | some (t -> t option) } 

instance cmp (for t. t option, t option -> ord) {
  -> a, b;
  a match
  | none {
    b match | none { equal } | some { drop less }
  }
  | some {
    b match | none { drop more } | some { cmp }
  }
}

define from-option (for t. t option, t -> t) {
  -> default; match | some {} | none { default }
}

define from-some (for t. t option, char list -> t <fail>) {
  -> message; match | some {} | none  { message fail-now }
}

define is-none (for t. t option -> bool) {
  match | none { true } | some  { drop false }
}

define is-some (for t. t option -> bool) {
  match | some { drop true } | none  { false }
}

define lift-option-2 (for a b c. a option, b option, (a, b -> c) -> c option) {
  -> mx, my, f;
  mx match
  | some {
    -> x; my match | some -> y { x y f call some } | _  { none }
  }
  | _  {
    none
  }
}

define map-option (for a b. a option, (a -> b) -> b option) {
  -> opt, f; opt match | some -> x { x f call some } | _  { none }
}

define option-fun (for R S a. R, a option, (R, a -> S), (R -> S) -> S) {
  -> f, g; match | some { f call } | none { g call }
}
