data (b a) either { left (a -> b a either) | right (b -> b a either) } 

instance cmp (for a b. b a either, b a either -> ord) {
  -> a, b;
  a match 
  | left {
    b match | left { cmp } | right { drop drop less }
  }
  | right {
    b match | left { drop drop more } | right { cmp }
  }
}

define either-fun (for R S a b. R, b a either, (R, a -> S), (R, b -> S) -> S) {
  -> f, g; match | left { f call } | right { g call }
}

define from-left (for a b. b a either, char list -> a <fail>) {
  -> message; match | left {} | _  { message fail-now }
}

define from-right (for a b. b a either, char list -> b <fail>) {
  -> message; match | right {} | _  { message fail-now }
}

define get-left (for a b. b a either -> a option) {
  match | left { some } | _  { none }
}

define get-right (for a b. b a either -> b option) {
  match | right { some } | _  { none }
}

define is-left (for a b. b a either -> bool) {
  match | left { drop true } | _  { false }
}

define is-right (for a b. b a either -> bool) {
  match | right { drop true } | _  { false }
}

define map-left (for a b c. b a either, (a -> c) -> b c either) {
  -> f; match | left { f call left } | right { right }
}

define map-right (for a b c. b a either, (b -> c) -> c a either) {
  -> f; match | right { f call right } | left { left }
}
