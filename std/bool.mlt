data bool { false ( -> bool) | true ( -> bool) } 

instance cmp (bool, bool -> ord) {
  -> a, b;
  a match
  | true {
    b match | true { equal } | false { more }
  }
  | false {
    b match | true { less } | false { more }
  }
}

define and (bool, bool -> bool) {
  match | false { drop false } | true {}
}

define implies (bool, bool -> bool) {
  match | false { drop true } | true {}
}

define not (bool -> bool) {
  match | true { false } | false { true }
}

define or (bool, bool -> bool) {
  match | true { drop true } | false {}
}

define until (for R. R, (R -> R, bool) -> R) {
  -> f; f call match | false { f until } | true {}
}

define while (for R. R, (R -> R, bool) -> R) {
  -> f; f call match | true { f while } | false {}
}

define xor (bool, bool -> bool) {
  match | true { not } | false {}
}
