permission exit (for R S +p. R, (R -> S <exit + p>) -> S <p>) {
  with (+exit)
}

permission fail (for R S +p. R, (R -> S <fail + p>) -> S <p>) {
  with (+fail)
}

permission io (for R S +p. R, (R -> S <io + p>) -> S <p>) {
  with (+io)
}

define call (for R S. R, (R -> S) -> S) {
  "call" extern
}

define drop (for a. a -> ) {
  "drop" extern
}

define swap (for a b. a, b -> b, a) {
  -> x, y; y x
}

about call {
  docs {
    """
    Applies a closure to the stack.

    This denotes modus ponens: if we have a program state 'R...', a permission
    '+P', and a closure '(R... -> S... +P)' as evidence that we can convert
    'R...' to 'S...' given '+P', then we can invoke the closure to produce the
    new state 'S...'.
    """
  }
}
