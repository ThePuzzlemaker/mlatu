module Mlatu {
  intrinsic call (for r.. s.. . r.., (r.. -> s..) -> s..)
  intrinsic drop (for a . a ->)
  intrinsic swap (for a b . a, b -> b, a)
}

permission exit (for r.. s.. +p . r.., (r.. -> s.. <exit + p>) -> s.. <p>) {
  with (+exit)
}

permission fail (for r.. s.. +p . r.., (r.. -> s.. <fail + p>) -> s.. <p>) {
  with (+fail)
}

permission io (for r.. s.. +p . r.., (r.. -> s.. <io + p>) -> s.. <p>) {
  with (+io)
}

define call (for r.. s.. . r.., (r.. -> s..) -> s..) {
  Mlatu.call
}

define drop (for a . a ->) {
  Mlatu.drop
}

define swap (for a b . a, b -> b, a) {
  -> x, y;
  y x
}

about call {
  docs {
    """
    Applies a closure to the stack.

    This denotes modus ponens: if we have a program state 'R...', a permission
    '+P', and a closure '(R... -> S... +P)' as evidence that we can convert
    'R...' to 'S...' given '+P', then we can invoke the closure to produce the
    new state 'S...'.
    """
  }
}
