codata (b a) pair { first (b a pair -> a) + second (b a pair -> b) } 

instance cmp (for a b. b a pair, b a pair -> ord) {
  -> a, b;
  a first b first cmp match
  | equal {
    a second b second cmp
  }
  | less {
    less
  }
  | more {
    more
  }
}

define flip (for a b. b a pair -> a b pair) {
  unpair swap pair
}

define map-pair (for a b c d. b a pair, (a -> c), (b -> d) -> d c pair) {
  -> p, f, g; p unpair -> a, b; (a f call) (b g call) pair
}

define unpair (for a b. b a pair -> a, b) {
  match | pair {}
}
