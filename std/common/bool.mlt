type bool {   case false case true }

instance cmp (bool, bool -> ord) {
  -> a, b;
  if (a) {
    if (b) { equal } else { more }
  } else {
    if (b) { less } else { more }
  }
}

define and (bool, bool -> bool) { not if { drop false } else {} }

define implies (bool, bool -> bool) { not if { drop true } else {} }

define not (bool -> bool) { if { false } else { true } }

define or (bool, bool -> bool) { swap if { drop true } else {} }

define xor (bool, bool -> bool) { swap if { not } else {} }

define until (for r.. . r.., (r.. -> r.., bool) -> r..) {
  -> f;
  if (f call not) { f until }
  else {}
}

define while (for r.. . r.., (r.. -> r.., bool) -> r..) {
  -> f;
  if (f call) { f while }
  else {}
}
