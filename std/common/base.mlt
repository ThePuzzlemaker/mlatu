define bi (for a b c. a, (a -> b), (a -> c) -> b, c) {
  -> x, f, g; (x f call) (x g call)
}

define bi2 (for a b c d. a, b, (a, b -> c), (a, b -> d) -> c, d) {
  -> x, y, f, g; (x y f call) (x y g call)
}

define bi3 (for a b c d e f. a, b, c, (a, b, c -> d), (a, b, c -> e), (a, b, c -> f) -> d, e, f) {
  -> x, y, z, f, g, h; (x y z f call) (x y z g call) (x y z h call)
}

define compose (for R S T. (R -> S), (S -> T) -> (R -> T)) {
  -> f, g; { f call g call }
}

define curry (for R S t +p. t, (R, t -> S <p>) -> (R -> S <p>)) {
  -> x, f; { x f call }
}

define curry2 (for R S a b +p. a, b, (R, a, b -> S <p>) -> (R -> S <p>)) {
  -> x, y, f; { x y f call }
}

define dip (for R S t. R, t, (R -> S) -> S, t) {
  -> x, f; f call x
}

define drop2 (for a b. a, b -> ) {
  drop drop
}

define drop3 (for a b c. a, b, c -> ) {
  drop drop drop
}

define dup (for t. t -> t, t) {
  -> x; x x
}

define dup2 (for a b. a, b -> a, b, a, b) {
  -> x, y; x y x y
}

define dup3 (for a b c. a, b, c -> a, b, c, a, b, c) {
  -> x, y, z; x y z x y z
}

define fix (for R S. R, (R, (R -> S) -> S) -> S) {
  -> f; { f fix } f call
}

define function (for t. t -> ( -> t)) {
  -> x; { x }
}

define id (for R. R -> R) {}

define keep (for R S t. R, t, (R, t -> S) -> S, t) {
  -> x, f; x f call x
}

define keep2 (for R S a b. R, a, b, (R, a, b -> S) -> S, a, b) {
  -> x, y, f; x y f call x y
}

define keep3 (for R S a b c. R, a, b, c, (R, a, b, c -> R) -> R, a, b, c) {
  -> x, y, z, f; x y z f call x y z
}

define nip (for a b. a, b -> b) {
  -> x; drop x
}

define nip2 (for a b c. a, b, c -> c) {
  -> x; drop2 x
}

define over (for a b. a, b -> a, b, a) {
  -> x, y; x y x
}

define over2 (for a b c. a, b, c -> a, b, c, a, b) {
  -> x, y, z; x y z x y
}

define pick (for a b c. a, b, c -> a, b, c, a) {
  -> x, y, z; x y z x
}

define swapped (for R S a b. (R, a, b -> R) -> (R, b, a -> R)) {
  \swap swap compose
}

define tri (for a b c d. a, (a -> b), (a -> c), (a -> d) -> b, c, d) {
  -> x, f, g, h; (x f call) (x g call) (x h call)
}

define tri2 (for a b c d e. a, b, (a, b -> c), (a, b -> d), (a, b -> e) -> c, d, e) {
  -> x, y, f, g, h; (x y f call) (x y g call) (x y h call)
}

define tri3 (for a b c d e f. a, b, c, (a, b, c -> d), (a, b, c -> e), (a, b, c -> f) -> d, e, f) {
  -> x, y, z, f, g, h; (x y z f call) (x y z g call) (x y z h call)
}

about curry {
  docs {
    "Partially applies the topmost argument of a function."
  }
}

about fix {
  docs {
    """
    computes the least fixed point of a function. can be used to write recursive
    definitions without explicit recursion, e.g.:

        // compute the factorial of 5.
        5 {
          -> n, rec;
          if (n <= 0):
            1
          else:
            (n - 1) rec call * n
        } fix
    """
  }
}
