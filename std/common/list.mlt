type list[t] { nil | cons (t, t list) } 

instance cmp (for t. t list, t list -> ord) {
  -> xs, ys;
  match (xs)
  | cons {
    -> x, x-tail;
    match (ys)
    | cons {
      -> y, y-tail;
      match (x y cmp)
      | equal { x-tail y-tail cmp }
      | less { less }
      | more { more }
    }
    | nil { more }
  }
  | nil { match (ys) | cons { drop drop less } | nil { equal } }
}

define and-all (bool list -> bool) { true \and fold-left }

define append (for t. t list, t list -> t list) {
  -> a, b; match (b) | nil { a } | cons { -> h, t; h a cons t append }
}

define append3 (for t. t list, t list, t list -> t list) { append append }

define cartesian (for a b. a list, b list -> b a pair list) {
  \mk-pair cartesian-with
}

define cartesian-with (for a b c. a list, b list, (a, b -> c) -> c list) {
  -> ys, f; [-> x; ys [x swap f call] map] map-concat
}

define combine (for a b. a list, b list -> b a pair list) {
  -> a, b;
  match (a)
  | cons {
    -> x1, x2;
    match (b)
    | cons { -> y1, y2; x1 y1 mk-pair x2 y2 combine cons }
    | nil { nil }
  }
  | nil { nil }
}

define concat (for t. t list list -> t list) { nil \append fold-left }

define concat-optionals (for t. t optional list -> t list) {
  nil [match | some { suffix } | _  []] fold-left
}

define empty (for t. t list -> bool) {
  match | nil { true } | cons { drop drop false }
}

define exists (for t. t list, (t -> bool) -> bool) {
  -> f; true [f call or] fold-left
}

define exists2 (for a b. a list, b list, (a, b -> bool) -> bool) {
  -> f; combine [unpair f call] exists
}

define filter-in (for t. t list, (t -> bool) -> t list) {
  -> f;
  match
  | cons { -> h, t; t f filter-in h f call if { h swap cons } else [] }
  | nil { nil }
}

define filter-out (for t. t list, (t -> bool) -> t list) {
  -> f; [f call not] filter-in
}

define find (for t. t list, (t -> bool) -> t optional) { filter-in hd }

define fold-left (for a b. b list, a, (a, b -> a) -> a) {
  -> z, k; match | cons { -> h, t; t (z h k call) k fold-left } | nil { z }
}

define fold-right (for a b. a list, b, (a, b -> b) -> b) {
  -> z, k;
  match (init-last) | some { unpair z k call k fold-right } | none { z }
}

define for-all (for t. t list, (t -> bool) -> bool) {
  -> f; true [f call and] fold-left
}

define for-all2 (for a b. a list, b list, (a, b -> bool) -> bool) {
  -> f; combine [unpair f call] for-all
}

define get-all (for t. t list, nat list -> t optional list) {
  swap -> list; [list swap nth] map
}

define glue (for t. t list, t list, t list -> t list) { prepend append }

define hd (for t. t list -> t optional) {
  match | nil { none } | cons { drop some }
}

define hd-tl (for t. t list -> t list t pair optional) {
  match | nil { none } | cons { mk-pair some }
}

define init (for t. t list -> t list optional) {
  match
  | nil { none }
  | cons {
    -> h, t;
    match (t init) | some { -> i; h i cons some } | none { h nil cons some }
  }
}

define init-last (for t. t list -> t t list pair optional) {
  match
  | nil { none }
  | cons {
    -> h, t;
    match (t)
    | cons {
      -> h1, t1;
      match (t1 init-last)
      | some { unpair -> i, l; (h) (h1) nil cons cons i append l mk-pair some }
      | none { (h) nil cons h1 mk-pair some }
    }
    | nil { nil h mk-pair some }
  }
}

define iter (for t +p. t list, (t ->  <p>) ->  <p>) {
  -> f; match | cons { -> h, t; h f call t f iter } | nil []
}

define iter2 (for a b +p. a list, b list, (a, b ->  <p>) ->  <p>) {
  -> f; combine [unpair f call] iter
}

define join (for t. t list list, t list -> t list) {
  -> g; nil [g glue] fold-left
}

define last (for t. t list -> t optional) {
  match
  | nil { none }
  | cons { -> h, t; match (t last) | some { some } | none { h some } }
}

define lefts (for a b. b a either list -> a list) { \get-left map-optionally }

define length (for t. t list -> nat) { zero [drop zero succ +] fold-left }

define map (for a b +p. a list, (a -> b <p>) -> b list <p>) {
  -> f; match | cons { -> h, t; (h f call) (t f map) cons } | nil { nil }
}

define map-concat (for a b. a list, (a -> b list) -> b list) { map concat }

define map-index (for a b +p. a list, (a, nat -> b <p>) -> b list <p>) {
  zero MapIndex.helper
}

define map-optionally (for a b. a list, (a -> b optional) -> b list) {
  -> f;
  match
  | cons {
    swap (f call)
    match | some { swap f map-optionally cons } | none { f map-optionally }
  }
  | nil { nil }
}

define map-reduce-left (for a b. a list, (a -> b), (b, b -> b) -> b optional) {
  -> f; map f reduce-left
}

define map-reduce-left2 (for a b c. a list, b list, (a, b -> c), (c, c -> c) -> c optional) {
  -> f; map2 f reduce-left
}

define map-reduce-right (for a b. a list, (a -> b), (b, b -> b) -> b optional) {
  -> f; map f reduce-right
}

define map-reduce-right2 (for a b c. a list, b list, (a, b -> c), (c, c -> c) -> c optional) {
  -> f; map2 f reduce-right
}

define map2 (for a b c +p. a list, b list, (a, b -> c <p>) -> c list <p>) {
  -> f; combine (\unpair f compose) map
}

define mem (for t. t, t list -> bool) { swap -> x; [x eq] exists }

define nth (for t. t list, nat -> t optional) {
  -> l, n;
  match (l)
  | nil { none }
  | cons { -> x, xs; match (n) | zero { x some } | succ { -> n1; xs n1 nth } }
}

define once (for t. t -> t list) { -> x; (x) nil cons }

define or-all (bool list -> bool) { true \or fold-left }

define pad-hd (for t. t list, nat, t -> t list) {
  -> list, min-length, elt;
  if (list length min-length lt) {
    list elt min-length list length - replicate prepend
  }
  else { list }
}

define pad-tl (for t. t list, nat, t -> t list) {
  -> list, min-length, elt;
  if (list length min-length lt) {
    elt min-length list length - replicate list prepend
  }
  else { list }
}

define partition (for t. t list, (t -> bool) -> t list, t list) {
  -> f; [f filter-in] [f filter-out] bi
}

define partition-eithers (for a b. b a either list -> a list, b list) {
  -> xs; (xs lefts) (xs rights)
}

define prepend (for t. t list, t list -> t list) { swap append }

define reduce-left (for t. t list, (t, t -> t) -> t optional) {
  -> f; tl-hd [unpair f fold-left] map-optional
}

define reduce-right (for t. t list, (t, t -> t) -> t optional) {
  -> f; init-last [unpair f fold-right] map-optional
}

define remove (for t. t list, t -> t list) { -> x; [x eq] filter-out }

define remove-nth (for t. t list, nat -> t list) {
  -> index;
  [-> x, i; if (i index eq) { nil } else { (x) nil cons }] map-index concat
}

define replicate (for t. t, nat -> t list) {
  -> value, count;
  if (count zero le) { nil }
  else { value count zero succ _.Mlatu.swap - replicate value suffix }
}

define rev (for t. t list -> t list) {
  match | cons { rev swap suffix } | nil { nil }
}

define rights (for a b. b a either list -> b list) { \get-right map-optionally }

define split (for a b. b a pair list -> a list, b list) {
  match
  | cons { -> h, t; h unpair -> m, n; t split -> ms, ns; m ms cons n ns cons }
  | nil { nil nil }
}

define suffix (for t. t list, t -> t list) { once append }

define surround (for t. t list, t list, t list -> t list) {
  -> x; prepend x append
}

define tl (for t. t list -> t list optional) {
  match | nil { none } | cons { swap drop some }
}

define tl-hd (for t. t list -> t t list pair optional) {
  match | nil { none } | cons { swap mk-pair some }
}

define _.MapIndex.helper (for a b +p. a list, (a, nat -> b <p>), nat -> b list <p>) {
  -> f, i;
  match
  | cons { -> h, t; h i f call t f i zero succ + helper cons }
  | nil { nil }
}
