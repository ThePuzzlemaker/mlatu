type (b a) either {   case left (a) case right (b) }

instance cmp (for a b. b a either, b a either -> ord) {
  -> a, b;
  match (a)
  case left {
    match (b)
    case left { cmp }
    case right { drop drop less }
  }
  case right {
    match (b)
    case left { drop drop more }
    case right { cmp}
  }
}

define either-fun (for r.. s.. a b . r.., b a either, (r.., a -> s..), (r.., b -> s..) -> s..) {
  -> f, g;
  match
  case left { f call }
  case right { g call }
}

define from-left (for a b . b a either, string -> a <fail>) {
  -> message;
  match
  case left {}
  else { message fail-now }
}

define from-right (for a b . b a either, string -> b <fail>) {
  -> message;
  match
  case right {}
  else { message fail-now }
}

define get-left (for a b . b a either -> a optional) {
  match
  case left { some }
  else { none }
}

define get-right (for a b . b a either -> b optional) {
  match
  case right { some }
  else { none }
}

define is-left (for a b . b a either -> bool) {
  match
  case left { drop true }
  else { false }
}

define is-right (for a b . b a either -> bool) {
  match
  case right { drop true }
  else { false }
}

define map-left (for a b c . b a either, (a -> c) -> b c either) {
  -> f;
  match
  case left { f call left }
  case right { right }
}

define map-right (for a b c . b a either, (b -> c) -> c a either) {
  -> f;
  match
  case right { f call right }
  case left { left }
}
