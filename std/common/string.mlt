trait read (for t. string -> t optional)

trait show (for t. t -> string)


data string {  } 

instance ++ (string, string -> string) {
  "string-concat" extern
}

instance cmp (string, string -> ord) {
  "cmp-string" extern
}

instance read (string -> nat optional) {
  "read-nat" extern
}

instance read (string -> char optional) {
  chars dup length 1 eq match | true { hd } | false { drop none }
}

instance read (string -> bool optional) {
  dup
  match ("true" eq)
  | true {
    drop true some
  }
  | false {
    match ("false" eq) | true { false some } | false { none }
  }
}

instance read (string -> string optional) {
  some
}

instance show (string -> string) {}

instance show (for a b. b a either -> string) {
  match | left { show " left" ++ } | right { show " right" ++ }
}

instance show (for t. t optional -> string) {
  match | some { show " some" ++ } | none { "none" }
}

instance show (bool -> string) {
  match | true { "true" } | false { "false" }
}

instance show (nat -> string) {
  "show-nat" extern
}

instance show (char -> string) {
  once from-chars
}

define chars (string -> char list) {
  "string-to-list" extern
}

define from-chars (char list -> string) {
  "string-from-list" extern
}
