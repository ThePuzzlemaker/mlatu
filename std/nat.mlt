data nat { zero ( -> nat) | succ (nat -> nat) } 

instance cmp (nat, nat -> ord) {
  -> a, b;
  a match
  | zero {
    b match | zero { equal } | succ { drop less }
  }
  | succ {
    b match | zero { drop more } | succ { cmp }
  }
}

define % (nat, nat -> nat) {
  -> a, b; a b lt match | true { a } | false { b a - b % succ }
}

define * (nat, nat -> nat) {
  -> a, b; a match | zero { 0 } | succ { b * b + }
}

define + (nat, nat -> nat) {
  match | zero {} | succ { + succ }
}

define - (nat, nat -> nat) {
  -> a, b;
  a match | zero { b } | succ { b match | zero { drop a } | succ { - } }
}

define / (nat, nat -> nat) {
  -> a, b; a b lt match | true { 0 } | false { b a - b / succ }
}

define pred (nat -> nat) {
  match | zero { 0 } | succ {}
}
