data (t) list { nil ( -> t list) | cons (t, t list -> t list) } 

instance cmp (for t. t list, t list -> ord) {
  -> xs, ys;
  xs match
  | cons {
    -> x, x-tail;
    ys match 
    | cons {
      -> y, y-tail;
      x y cmp match
      | equal {
        x-tail y-tail cmp
      }
      | less {
        less
      }
      | more {
        more
      }
    }
    | nil {
      more
    }
  }
  | nil {
    ys match | cons { drop drop less } | nil { equal }
  }
}

define and-all (bool list -> bool) {
  true \and fold-left
}

define append (for t. t list, t list -> t list) {
  -> a, b; b match | nil { a } | cons { -> h, t; h a cons t append }
}

define append3 (for t. t list, t list, t list -> t list) {
  append append
}

define cartesian (for a b. a list, b list -> (b a pair) list) {
  \pair cartesian-with
}

define cartesian-with (for a b c. a list, b list, (a, b -> c) -> c list) {
  -> ys, f; { -> x; ys { x swap f call } map } map-concat
}

define combine (for a b. a list, b list -> (b a pair) list) {
  -> a, b;
  a match
  | cons {
    -> x1, x2;
    b match
    | cons {
      -> y1, y2; x1 y1 pair x2 y2 combine cons
    }
    | nil {
      nil
    }
  }
  | nil {
    nil
  }
}

define concat (for t. (t list) list -> t list) {
  nil \append fold-left
}

define concat-options (for t. (t option) list -> t list) {
  nil { match | some { suffix } | _  {} } fold-left
}

define empty (for t. t list -> bool) {
  match | nil { true } | cons { drop drop false }
}

define exists (for t. t list, (t -> bool) -> bool) {
  -> f; true { f call or } fold-left
}

define exists2 (for a b. a list, b list, (a, b -> bool) -> bool) {
  -> f; combine { unpair f call } exists
}

define filter-in (for t. t list, (t -> bool) -> t list) {
  -> f;
  match
  | cons {
    -> h, t; t f filter-in h f call match | true { h swap cons } | false {}
  }
  | nil {
    nil
  }
}

define filter-out (for t. t list, (t -> bool) -> t list) {
  -> f; { f call not } filter-in
}

define find (for t. t list, (t -> bool) -> t option) {
  filter-in hd
}

define fold-left (for a b. b list, a, (a, b -> a) -> a) {
  -> z, k; match | cons { -> h, t; t (z h k call) k fold-left } | nil { z }
}

define fold-right (for a b. a list, b, (a, b -> b) -> b) {
  -> z, k;
  init-last match | some { unpair z k call k fold-right } | none { z }
}

define for-all (for t. t list, (t -> bool) -> bool) {
  -> f; true { f call and } fold-left
}

define for-all2 (for a b. a list, b list, (a, b -> bool) -> bool) {
  -> f; combine { unpair f call } for-all
}

define get-all (for t. t list, nat list -> (t option) list) {
  swap -> list; { list swap nth } map
}

define glue (for t. t list, t list, t list -> t list) {
  prepend append
}

define hd (for t. t list -> t option) {
  match | nil { none } | cons { drop some }
}

define hd-tl (for t. t list -> ((t list) t pair) option) {
  match | nil { none } | cons { pair some }
}

define init (for t. t list -> (t list) option) {
  match
  | nil {
    none
  }
  | cons {
    -> h, t;
    t init match | some { -> i; h i cons some } | none { h nil cons some }
  }
}

define init-last (for t. t list -> (t (t list) pair) option) {
  match
  | nil {
    none
  }
  | cons {
    -> h, t;
    t match
    | cons {
      -> h1, t1;
      t1 init-last match
      | some {
        unpair -> i, l; (h) (h1) nil cons cons i append l pair some
      }
      | none {
        (h) nil cons h1 pair some
      }
    }
    | nil {
      nil h pair some
    }
  }
}

define iter (for t +p. t list, (t ->  <p>) ->  <p>) {
  -> f; match | cons { -> h, t; h f call t f iter } | nil {}
}

define iter2 (for a b +p. a list, b list, (a, b ->  <p>) ->  <p>) {
  -> f; combine { unpair f call } iter
}

define join (for t. (t list) list, t list -> t list) {
  -> g; nil { g glue } fold-left
}

define last (for t. t list -> t option) {
  match
  | nil {
    none
  }
  | cons {
    -> h, t; t last match | some { some } | none { h some }
  }
}

define lefts (for a b. (b a either) list -> a list) {
  \get-left map-optionally
}

define length (for t. t list -> nat) {
  0 { drop 1 + } fold-left
}

define map (for a b +p. a list, (a -> b <p>) -> b list <p>) {
  -> f; match | cons { -> h, t; (h f call) (t f map) cons } | nil { nil }
}

define map-concat (for a b. a list, (a -> b list) -> b list) {
  map concat
}

define map-index (for a b +p. a list, (a, nat -> b <p>) -> b list <p>) {
  0 MapIndex.helper
}

define map-optionally (for a b. a list, (a -> b option) -> b list) {
  -> f;
  match
  | cons {
    swap
    f call match
    | some {
      swap f map-optionally cons
    }
    | none {
      f map-optionally
    }
  }
  | nil {
    nil
  }
}

define map-reduce-left (for a b. a list, (a -> b), (b, b -> b) -> b option) {
  -> f; map f reduce-left
}

define map-reduce-left2 (for a b c. a list, b list, (a, b -> c), (c, c -> c) -> c option) {
  -> f; map2 f reduce-left
}

define map-reduce-right (for a b. a list, (a -> b), (b, b -> b) -> b option) {
  -> f; map f reduce-right
}

define map-reduce-right2 (for a b c. a list, b list, (a, b -> c), (c, c -> c) -> c option) {
  -> f; map2 f reduce-right
}

define map2 (for a b c +p. a list, b list, (a, b -> c <p>) -> c list <p>) {
  -> f; combine (\unpair f compose) map
}

define mem (for t. t, t list -> bool) {
  swap -> x; { x eq } exists
}

define nth (for t. t list, nat -> t option) {
  -> l, n;
  l match
  | nil {
    none
  }
  | cons {
    -> x, xs; n match | zero { x some } | succ { -> n1; xs n1 nth }
  }
}

define once (for t. t -> t list) {
  -> x; (x) nil cons
}

define or-all (bool list -> bool) {
  true \or fold-left
}

define pad-hd (for t. t list, nat, t -> t list) {
  -> list, min-length, elt;
  list length min-length lt match
  | true {
    list elt min-length list length - replicate prepend
  }
  | false {
    list
  }
}

define pad-tl (for t. t list, nat, t -> t list) {
  -> list, min-length, elt;
  list length min-length lt match
  | true {
    elt min-length list length - replicate list prepend
  }
  | false {
    list
  }
}

define partition (for t. t list, (t -> bool) -> t list, t list) {
  -> f; { f filter-in } { f filter-out } bi
}

define partition-eithers (for a b. (b a either) list -> a list, b list) {
  -> xs; (xs lefts) (xs rights)
}

define prepend (for t. t list, t list -> t list) {
  swap append
}

define reduce-left (for t. t list, (t, t -> t) -> t option) {
  -> f; tl-hd { unpair f fold-left } map-optional
}

define reduce-right (for t. t list, (t, t -> t) -> t optional) {
  -> f; init-last { unpair f fold-right } map-optional
}

define remove (for t. t list, t -> t list) {
  -> x; { x eq } filter-out
}

define remove-nth (for t. t list, nat -> t list) {
  -> index;
  { -> x, i; i index eq match | true { nil } | false { x nil cons } }
  map-index concat
}

define replicate (for t. t, nat -> t list) {
  -> value, count;
  count match | zero { nil } | succ { -> nc; value nc replicate value suffix }
}

define rev (for t. t list -> t list) {
  match | cons { rev swap suffix } | nil { nil }
}

define rights (for a b. (b a either) list -> b list) {
  \get-right map-optionally
}

define split (for a b. (b a pair) list -> a list, b list) {
  match
  | cons {
    -> h, t; h unpair -> m, n; t split -> ms, ns; m ms cons n ns cons
  }
  | nil {
    nil nil
  }
}

define suffix (for t. t list, t -> t list) {
  once append
}

define surround (for t. t list, t list, t list -> t list) {
  -> x; prepend x append
}

define tl (for t. t list -> (t list) option) {
  match | nil { none } | cons { swap drop some }
}

define tl-hd (for t. t list -> (t (t list) pair) option) {
  match | nil { none } | cons { swap pair some }
}

define MapIndex.helper (for a b +p. a list, (a, nat -> b <p>), nat -> b list <p>) {
  -> f, i;
  match | cons { -> h, t; h i f call t f i 1 + helper cons } | nil { nil }
}
